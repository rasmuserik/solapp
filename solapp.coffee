# Work in progress, not running yet
#
#{{{1 About
#
#{{{2 What
#
# Quickly create apps
#
# - edit `APPNAME.coffee`
# - run `solapp`
# - edit `package.json`
# - create icon and screenshot in `meta`-folder
# - done
#
#{{{2 Usage
#
#     solapp start
#
# Starts devserver for app in current directory
#
#     solapp test
#
# Run tests for app in current directory
#
#     solapp commit some description here
#
# Increment package version, commit, pull, test, push, npm publish
#
#
#{{{2 File structure for projects
#
# Project files:
#
# - APPNAME.coffee - handedited - APPNAME should be the `name` in package.json
# - package.json - partly autogenerated, but also handedited
# - meta/icon.png - at least 512x512 square icon
# - meta/screen1.png - screenshot
# - meta/screen2.png - screenshot
# - meta/feature.png - 1024x500 banner
# - res/* - resources for the app to use/access, will be in the same directory as the app
#
# Generated files
# - package.json - handedited and autoupdated
# - .gitignore
# - .travis.yml
# - APPNAME.js - autogenerated from APPNAME.coffee
# - README.md - autogenerated from package.json for description and APPNAME.coffee as literate code
# - dist/* - various 
#
#{{{2 Old notes needing merging
#
# - weekly app
#   - $APP/package.json - with meta-data for appstore
#   - $APP/$APP.coffee
#   - $APP/meta/icon.png 512x512
#   - $APP/meta/screen1.png
#   - $APP/meta/screen2.png
#   - $APP/meta/feature.png 1024x500
#   - ($APP/meta/screenN.png)
#   - ($APP/meta/demo.webm - short video)
# - solapp
#   - README.md from package.json, meta/icon+screen+feature, and $APP.coffee
#   - require/load/bundle package.dependencies on web
#   - .gitignore
#   - package.json - update/automake
#   - travis.yml
#   - compile coffeescript
#   - preprocessing `typeof isNodeJs === "boolean" || isNodeJs = ...`
#   - dist: solsort.com (cache-manifest, add-to-home-screen, ie-pinned-site), android market, mozilla-marketplace, chrome-store (apple app-store, facebook, amazon, windows, blackberry, steam)
# 
#
#{{{1 Literate source code

fs = require "fs"

#{{{2 autoexpand package.json
expandPackage = (project) ->
  pkg = (project.package ?= {})
  pkg.fullname ?= pkg.name || project.name
  pkg.author ?= "Rasmus Erik Voel Jensen (solsort.com)"
  pkg.description ?= "TODO: description here"
  pkg.name ?= project.name
  pkg.owner ?= "rasmuserik"
  pkg.version ?= "0.0.1"
  pkg.main ?= pkg.name + ".js"
  pkg.scripts ?= {}
  pkg.scripts.start ?= "node ./node_modules/solapp/solapp.js start"
  pkg.scripts.test ?= "node ./node_modules/solapp/solapp.js test"
  pkg.dependencies ?= {}
  pkg.dependencies.solapp ?= "*" if pkg.name != "solapp"
  console.log "writing package.json"
  fs.writeFile "#{project.dirname}/package.json", "#{JSON.stringify pkg, null, 4}\n", (err) -> throw err if err

#{{{2 create README.md
genReadme = (project) ->
  source = project.source
  pkg = project.package
  result =""
  result += "![#{pkg.name}](https://raw.github.com/#{pkg.owner}/#{pkg.name}/master/meta/feature.png\n" if fs.existsSync "#{project.dirname}/meta/feature.png"
  result += "# #{pkg.fullname || pkg.name}\n"
  result += "[![ci](https://secure.travis-ci.org/#{pkg.owner}/#{pkg.name}.png)](http://travis-ci.org/#{pkg.owner}/#{pkg.name})\n"
  result += "\n#{pkg.description}\n"

  for line in source.split("\n")

    if (line.search /^\s*#/) == -1
      line = "    " + line
      isCode = true
    else
      line = line.replace /^\s*# ?/, ""
      line = line.replace /(.*){{{(\d)(.*)/, (_, a, header, b) ->
        ("#" for i in [1..+header]).join("") + " " + (a + b).trim()
      isCode = false


    if isCode != prevWasCode
      result += "\n"
    prevWasCode = isCode

    result += line + "\n"

  result += "\n\n----\n\nAutogenerated README.md, edit #{pkg.name}.coffee or package.json to update "
  result += "![solsort](https://ssl.solsort.com/_solapp_#{pkg.owner}_#{pkg.name}.png)\n"

  return result

#{{{2 loadProject

loadProject = (dirname) ->
  try
    pkg = fs.readFileSync dirname + "/package.json", "utf8"
  catch e
    pkg = "{}"
  pkg = JSON.parse pkg
  name = pkg.name || dirname.split("/").slice(-1)[0]
  result =
    dirname: dirname
    name: name
    package: pkg
    source: fs.readFileSync "#{dirname}/#{name}.coffee", "utf8"
  expandPackage result
  result


#{{{1 temporary code during development
project = loadProject process.cwd()

console.log "writing README.md"
fs.writeFileSync "#{project.dirname}/README.md", genReadme project
